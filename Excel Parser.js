// Get current excel file GR
var attachGR = new GlideRecord('sys_attachment');
attachGR.addQuery('table_name', 'sc_req_item');
attachGR.addQuery('table_sys_id', current.sys_id);
attachGR.query();
if(attachGR.next()) {
	// Initialize Vars
	var assignGroup = current.variables.assignment_group;
	var assignTo = current.variables.assigned_to;
	var environmentID = current.variables.u_environment;
	var environmentName = current.variables.u_environment.u_name.getDisplayValue();
	var prefix = current.variables.prefix;

	// Parse through excel
	var parser = new sn_impex.GlideExcelParser(); 
	var attachment = new GlideSysAttachment();
	// use attachment sys id of an excel file
	var attachmentStream = attachment.getContentStream(attachGR.sys_id);
	parser.parse(attachmentStream); 
	//retrieve the column headers
	var headers = parser.getColumnHeaders();
	var numberHeader = headers[0];
	var numberArr = [];
	while(parser.next()) { 
		var row = parser.getRow(); 
		//Process each CHG here
		numberArr.push(row[numberHeader]);
		cutTaskForChange(row[numberHeader].trim());
	}
	current.work_notes = "Cut Tasks for: \n" + numberArr.join('\n'); 
}
else {
	current.work_notes = "No attachment found for this record.";
}



function cutTaskForChange(chgNumber) {
	var chg = new GlideRecord('change_request');
	chg.get('number', chgNumber);
	// Create change task
	var changeTask = new GlideRecord('change_task');
	changeTask.initialize();
	changeTask.create_from = "Generated by Workflow Script: " + current.getValue('number');
	changeTask.change_request = chg.getUniqueValue();
	changeTask.u_validator = chg.getValue('u_change_validator');
	changeTask.assignment_group = assignGroup;
	changeTask.assigned_to = assignTo;
	if(prefix != "")
		changeTask.short_description = environmentName + " (" + prefix + ") - " + chg.short_description;
	else
		changeTask.short_description = environmentName + " - " + chg.short_description;
	changeTask.description = 'Please complete the ' + environmentName + ' environment';
	changeTask.u_environment = environmentID;
	changeTask.insert();
	//workflow.info("sleeping for 1s on: " + chg.getValue('number'));
	gs.sleep(1000); //sleep for 1s, DBAs can sort by updated datestamp
	workflow.info('Inserted Task: ' + changeTask.getValue('number') + ' for ' + chg.number);	
}

